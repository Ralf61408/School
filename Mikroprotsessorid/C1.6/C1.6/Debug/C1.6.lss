
C1.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8e  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b8d  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  00001a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053a  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  88:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  90:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  94:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  a8:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <viivitus>:
		}
	}
}

void viivitus(uint16_t ms){
	for(uint16_t j = 0; j < ms; j++) {
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	51 f0       	breq	.+20     	; 0xce <viivitus+0x1e>
  ba:	48 ec       	ldi	r20, 0xC8	; 200
  bc:	50 e0       	ldi	r21, 0x00	; 0
		for(uint16_t i = 0; i < 200; i++) {
			asm volatile("nop");
  be:	00 00       	nop
			asm volatile("nop");
  c0:	00 00       	nop
  c2:	41 50       	subi	r20, 0x01	; 1
  c4:	51 09       	sbc	r21, r1
	}
}

void viivitus(uint16_t ms){
	for(uint16_t j = 0; j < ms; j++) {
		for(uint16_t i = 0; i < 200; i++) {
  c6:	d9 f7       	brne	.-10     	; 0xbe <viivitus+0xe>
		}
	}
}

void viivitus(uint16_t ms){
	for(uint16_t j = 0; j < ms; j++) {
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	f3 cf       	rjmp	.-26     	; 0xb4 <viivitus+0x4>
		for(uint16_t i = 0; i < 200; i++) {
			asm volatile("nop");
			asm volatile("nop");
		}
	}
  ce:	08 95       	ret

000000d0 <main>:
#include <avr/io.h>
void viivitus(uint16_t);


int main(void){
	DDRA = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 b9       	out	0x01, r24	; 1
	PORTF = 1 << PINF5;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	81 bb       	out	0x11, r24	; 17
	PORTF |= 1 << PINF3;
  d8:	8b 9a       	sbi	0x11, 3	; 17
    /* Replace with your application code */
	
	MCUCR |= 1 << JTD;
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	85 bf       	out	0x35, r24	; 53
	MCUCR |= 1 << JTD;
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	85 bf       	out	0x35, r24	; 53
	//vasakule
    {if (!(PINF & 1 <<PINF5)){
		PORTA = PORTA << 1;
		
		if (PORTA == 0x00){
			PORTA = 0x01;
  e6:	c1 e0       	ldi	r28, 0x01	; 1
		
		if (!(PINF & 1 <<PINF3)){
			PORTA = PORTA >> 1;
			
			if (PORTA == 0x00){
				PORTA = 0x80;
  e8:	d0 e8       	ldi	r29, 0x80	; 128
	
	MCUCR |= 1 << JTD;
	MCUCR |= 1 << JTD;
    while (1) 
	//vasakule
    {if (!(PINF & 1 <<PINF5)){
  ea:	7d 9b       	sbis	0x0f, 5	; 15
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <main+0x24>
			
		}
		 }
		//paremale
		
		if (!(PINF & 1 <<PINF3)){
  ee:	7b 99       	sbic	0x0f, 3	; 15
  f0:	fc cf       	rjmp	.-8      	; 0xea <main+0x1a>
  f2:	0e c0       	rjmp	.+28     	; 0x110 <main+0x40>
	MCUCR |= 1 << JTD;
	MCUCR |= 1 << JTD;
    while (1) 
	//vasakule
    {if (!(PINF & 1 <<PINF5)){
		PORTA = PORTA << 1;
  f4:	82 b1       	in	r24, 0x02	; 2
  f6:	88 0f       	add	r24, r24
  f8:	82 b9       	out	0x02, r24	; 2
		
		if (PORTA == 0x00){
  fa:	82 b1       	in	r24, 0x02	; 2
  fc:	81 11       	cpse	r24, r1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <main+0x32>
			PORTA = 0x01;
 100:	c2 b9       	out	0x02, r28	; 2
		}
		
		viivitus(500);
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 58 00 	call	0xb0	; 0xb0 <viivitus>
		
		while (!(PINF & 1 << PINF5)){
 10a:	7d 9b       	sbis	0x0f, 5	; 15
 10c:	fe cf       	rjmp	.-4      	; 0x10a <main+0x3a>
 10e:	ef cf       	rjmp	.-34     	; 0xee <main+0x1e>
		}
		 }
		//paremale
		
		if (!(PINF & 1 <<PINF3)){
			PORTA = PORTA >> 1;
 110:	82 b1       	in	r24, 0x02	; 2
 112:	86 95       	lsr	r24
 114:	82 b9       	out	0x02, r24	; 2
			
			if (PORTA == 0x00){
 116:	82 b1       	in	r24, 0x02	; 2
 118:	81 11       	cpse	r24, r1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x4e>
				PORTA = 0x80;
 11c:	d2 b9       	out	0x02, r29	; 2
			}
			
			viivitus(500);
 11e:	84 ef       	ldi	r24, 0xF4	; 244
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 58 00 	call	0xb0	; 0xb0 <viivitus>
			
			while (!(PINF & 1 << PINF3)){
 126:	7b 9b       	sbis	0x0f, 3	; 15
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0x56>
 12a:	df cf       	rjmp	.-66     	; 0xea <main+0x1a>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
