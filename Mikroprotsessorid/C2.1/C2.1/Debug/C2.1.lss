
C2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da5  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c01  00000000  00000000  0000105d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000551  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d7  00000000  00000000  0000254d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  88:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  90:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  94:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  a8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <init_usart>:
	}
}

void init_usart(void){
	//baud to 9600
	UBRR1= 12;
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
  b8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	//enable saaks saata
	UCSR1B=(1<<TXEN1);
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	//Frame format 8bit
	UCSR1C=(1 << UCSZ11)|(1 << UCSZ10);
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
  c8:	08 95       	ret

000000ca <init_adc>:
}

void init_adc(void){
	//enable adc, adc Start Conversion, adc Auto Trigger Enable, Prescaler /16
	ADCSRA=(1 << ADEN)|(1 << ADSC)|(1 << ADATE)|(1 << ADPS2);
  ca:	84 ee       	ldi	r24, 0xE4	; 228
  cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// ADC2
	ADMUX=(1 << MUX1)|(1 << REFS0);
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  d6:	08 95       	ret

000000d8 <send>:
	//while(!(ADCSRA&(1<<ADIF))); 
}

void send(char num){
	while((UCSR1A&(1<<UDRE1))==0);
  d8:	e8 ec       	ldi	r30, 0xC8	; 200
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	95 ff       	sbrs	r25, 5
  e0:	fd cf       	rjmp	.-6      	; 0xdc <send+0x4>
	UDR1= num;
  e2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
  e6:	08 95       	ret

000000e8 <mis_nr>:
}

int mis_nr(){
	uint16_t adc= ADC;
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	if(adc<101){
  f0:	85 36       	cpi	r24, 0x65	; 101
  f2:	91 05       	cpc	r25, r1
  f4:	20 f4       	brcc	.+8      	; 0xfe <mis_nr+0x16>
		
		send('0');
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
  fc:	08 95       	ret
	}
	else if (adc<201){
  fe:	89 3c       	cpi	r24, 0xC9	; 201
 100:	91 05       	cpc	r25, r1
 102:	20 f4       	brcc	.+8      	; 0x10c <mis_nr+0x24>
		send('1');
 104:	81 e3       	ldi	r24, 0x31	; 49
 106:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 10a:	08 95       	ret
	}
	else if (adc<301){
 10c:	8d 32       	cpi	r24, 0x2D	; 45
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	92 07       	cpc	r25, r18
 112:	20 f4       	brcc	.+8      	; 0x11c <mis_nr+0x34>
		send('2');
 114:	82 e3       	ldi	r24, 0x32	; 50
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 11a:	08 95       	ret
	}
	else if (adc<401){
 11c:	81 39       	cpi	r24, 0x91	; 145
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	92 07       	cpc	r25, r18
 122:	20 f4       	brcc	.+8      	; 0x12c <mis_nr+0x44>
		send('3');
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 12a:	08 95       	ret
	}
	else if (adc<501){
 12c:	85 3f       	cpi	r24, 0xF5	; 245
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	92 07       	cpc	r25, r18
 132:	20 f4       	brcc	.+8      	; 0x13c <mis_nr+0x54>
		send('4');
 134:	84 e3       	ldi	r24, 0x34	; 52
 136:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 13a:	08 95       	ret
	}
	else if (adc<601){
 13c:	89 35       	cpi	r24, 0x59	; 89
 13e:	22 e0       	ldi	r18, 0x02	; 2
 140:	92 07       	cpc	r25, r18
 142:	20 f4       	brcc	.+8      	; 0x14c <mis_nr+0x64>
		send('5');
 144:	85 e3       	ldi	r24, 0x35	; 53
 146:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 14a:	08 95       	ret
	}
	else if (adc<701){
 14c:	8d 3b       	cpi	r24, 0xBD	; 189
 14e:	22 e0       	ldi	r18, 0x02	; 2
 150:	92 07       	cpc	r25, r18
 152:	20 f4       	brcc	.+8      	; 0x15c <mis_nr+0x74>
		send('6');
 154:	86 e3       	ldi	r24, 0x36	; 54
 156:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 15a:	08 95       	ret
	}
	else if (adc<801){
 15c:	81 32       	cpi	r24, 0x21	; 33
 15e:	23 e0       	ldi	r18, 0x03	; 3
 160:	92 07       	cpc	r25, r18
 162:	20 f4       	brcc	.+8      	; 0x16c <mis_nr+0x84>
		send('7');
 164:	87 e3       	ldi	r24, 0x37	; 55
 166:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 16a:	08 95       	ret
	}
	else if (adc<=899){
 16c:	84 38       	cpi	r24, 0x84	; 132
 16e:	93 40       	sbci	r25, 0x03	; 3
 170:	20 f4       	brcc	.+8      	; 0x17a <mis_nr+0x92>
		send('8');
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
 178:	08 95       	ret
	}
	else {
		send('9');
 17a:	89 e3       	ldi	r24, 0x39	; 57
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <send>
	}
}
 180:	08 95       	ret

00000182 <main>:
 */ 

#include <avr/io.h>


int main(void){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	void init_adc(void);
	void send(char num);
	int mis_nr();
	
	
	init_usart();
 186:	0e 94 58 00 	call	0xb0	; 0xb0 <init_usart>
	init_adc();
 18a:	0e 94 65 00 	call	0xca	; 0xca <init_adc>
	//send('a');
	
	while (ADCSRA & (1<<ADSC)) {
 18e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 192:	86 ff       	sbrs	r24, 6
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <main+0x22>
 196:	ca e7       	ldi	r28, 0x7A	; 122
 198:	d0 e0       	ldi	r29, 0x00	; 0
		
		//send('b');
		/* Wait for empty transmit buffer */
		
			mis_nr();
 19a:	0e 94 74 00 	call	0xe8	; 0xe8 <mis_nr>
	
	init_usart();
	init_adc();
	//send('a');
	
	while (ADCSRA & (1<<ADSC)) {
 19e:	88 81       	ld	r24, Y
 1a0:	86 fd       	sbrc	r24, 6
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <main+0x18>
		/* Wait for empty transmit buffer */
		
			mis_nr();
		
	}
}
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
