
C2.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8f  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b8e  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054c  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  88:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  90:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  94:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  a8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <init_adc>:
	}
}

void init_adc(){
	//enable ADC, ADC Start Conversion, ADC Auto Trigger Enable, Prescaler /16
	ADCSRA=(1 << ADEN)|(1 << ADSC)|(1 << ADATE)|(1 << ADPS2);
  b0:	84 ee       	ldi	r24, 0xE4	; 228
  b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// ADC2 pot tööle
	ADMUX=(1 << MUX1)|(1 << REFS0);
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  bc:	08 95       	ret

000000be <init_pwm>:
}
void init_pwm(){
	// set to 10 bit fast pmw
	TCCR1A= (1 << WGM11)|(1 << WGM10)|(1 << COM0A1);
  be:	83 e8       	ldi	r24, 0x83	; 131
  c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	// timer prescaler
	TCCR1B= (1 << WGM12)|(1<<CS10);
  c4:	89 e0       	ldi	r24, 0x09	; 9
  c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  ca:	08 95       	ret

000000cc <main>:
	void init_adc(void);
	void init_pwm(void);
	void init_led(void);
	
	
	init_adc();
  cc:	0e 94 58 00 	call	0xb0	; 0xb0 <init_adc>
	init_pwm();
  d0:	0e 94 5f 00 	call	0xbe	; 0xbe <init_pwm>
	// timer prescaler
	TCCR1B= (1 << WGM12)|(1<<CS10);
}
void init_led(){
	//led väljundiks
	DDRB= (1<<DDB5);
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	84 b9       	out	0x04, r24	; 4
	
	init_adc();
	init_pwm();
	init_led();
	while (1) {
		while (ADCSRA & (1<<ADSC))  {
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
			OCR1A=ADC;
  dc:	c8 e7       	ldi	r28, 0x78	; 120
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	a8 e8       	ldi	r26, 0x88	; 136
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <main+0x24>
  e6:	88 81       	ld	r24, Y
  e8:	99 81       	ldd	r25, Y+1	; 0x01
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	9c 93       	st	X, r25
  ee:	8e 93       	st	-X, r24
	
	init_adc();
	init_pwm();
	init_led();
	while (1) {
		while (ADCSRA & (1<<ADSC))  {
  f0:	80 81       	ld	r24, Z
  f2:	86 fd       	sbrc	r24, 6
  f4:	f8 cf       	rjmp	.-16     	; 0xe6 <main+0x1a>
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <main+0x24>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
