
C2.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d81  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c05  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000554  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_23>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  88:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  90:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  94:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  a8:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <__vector_23>:
}

void saada(char num) {
	kontrolli();
	UDR1 = num;
}
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	80 b9       	out	0x00, r24	; 0
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <kontrolli>:
  cc:	e8 ec       	ldi	r30, 0xC8	; 200
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	85 ff       	sbrs	r24, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <kontrolli+0x4>
  d6:	08 95       	ret

000000d8 <viivis>:

void viivis(uint16_t ms) {
  d8:	ac 01       	movw	r20, r24
	for(uint16_t j = 0; j < ms; j++) {
  da:	89 2b       	or	r24, r25
  dc:	61 f4       	brne	.+24     	; 0xf6 <viivis+0x1e>
  de:	08 95       	ret
		for(uint8_t i = 0; i < 170; i++) {
			asm volatile("nop");
  e0:	00 00       	nop
			asm volatile("nop");
  e2:	00 00       	nop
			asm volatile("nop");
  e4:	00 00       	nop
  e6:	91 50       	subi	r25, 0x01	; 1
	UDR1 = num;
}

void viivis(uint16_t ms) {
	for(uint16_t j = 0; j < ms; j++) {
		for(uint8_t i = 0; i < 170; i++) {
  e8:	d9 f7       	brne	.-10     	; 0xe0 <viivis+0x8>
	kontrolli();
	UDR1 = num;
}

void viivis(uint16_t ms) {
	for(uint16_t j = 0; j < ms; j++) {
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	42 17       	cp	r20, r18
  f0:	53 07       	cpc	r21, r19
  f2:	19 f4       	brne	.+6      	; 0xfa <viivis+0x22>
  f4:	08 95       	ret
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
void saada(char num) {
	kontrolli();
	UDR1 = num;
}

void viivis(uint16_t ms) {
  fa:	9a ea       	ldi	r25, 0xAA	; 170
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <viivis+0x8>

000000fe <main>:


int main(void) {
	
	//UART init
	UBRR1 = 12;
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
 106:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1B = (1 << TXEN1);
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1 << UCSZ11)|(1 << UCSZ10);
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
	//LED init
	DDRA = 0x02;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	81 b9       	out	0x01, r24	; 1
	//Timer init
	TCNT0 = 0x00;
 11a:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = (1 << TOIE1); //Overflow interrupt
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (1 << CS02)|(1 << CS00); //Prescaler 1024
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	85 bd       	out	0x25, r24	; 37
	sei(); //Enable global interrupts by setting SREG
 126:	78 94       	sei
		 
}

void saada(char num) {
	kontrolli();
	UDR1 = num;
 128:	ce ec       	ldi	r28, 0xCE	; 206
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	0f 2e       	mov	r0, r31
 12e:	f2 e5       	ldi	r31, 0x52	; 82
 130:	ef 2e       	mov	r14, r31
 132:	f0 2d       	mov	r31, r0
 134:	0f 2e       	mov	r0, r31
 136:	f1 e6       	ldi	r31, 0x61	; 97
 138:	ff 2e       	mov	r15, r31
 13a:	f0 2d       	mov	r31, r0
 13c:	0c e6       	ldi	r16, 0x6C	; 108
 13e:	16 e6       	ldi	r17, 0x66	; 102
	while(!(UCSR1A & (1 << UDRE1)));
		 
}

void saada(char num) {
	kontrolli();
 140:	0e 94 66 00 	call	0xcc	; 0xcc <kontrolli>
	UDR1 = num;
 144:	e8 82       	st	Y, r14
	while(!(UCSR1A & (1 << UDRE1)));
		 
}

void saada(char num) {
	kontrolli();
 146:	0e 94 66 00 	call	0xcc	; 0xcc <kontrolli>
	UDR1 = num;
 14a:	f8 82       	st	Y, r15
	while(!(UCSR1A & (1 << UDRE1)));
		 
}

void saada(char num) {
	kontrolli();
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <kontrolli>
	UDR1 = num;
 150:	08 83       	st	Y, r16
	while(!(UCSR1A & (1 << UDRE1)));
		 
}

void saada(char num) {
	kontrolli();
 152:	0e 94 66 00 	call	0xcc	; 0xcc <kontrolli>
	UDR1 = num;
 156:	18 83       	st	Y, r17
	while (1) {
		saada('R');
		saada('a');
		saada('l');
		saada('f');
		viivis(1000);
 158:	88 ee       	ldi	r24, 0xE8	; 232
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <viivis>
 160:	ef cf       	rjmp	.-34     	; 0x140 <main+0x42>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
