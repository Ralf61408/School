
C2.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d34  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bee  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000434  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000566  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a0  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_17>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_25>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  88:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  90:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  94:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	0e 94 6d 00 	call	0xda	; 0xda <main>
  a8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <__vector_17>:
		saada('l');
		saada('f');
	}
}

ISR(TIMER1_COMPA_vect) {
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
	PORTA ^= 0xff;
  bc:	82 b1       	in	r24, 0x02	; 2
  be:	80 95       	com	r24
  c0:	82 b9       	out	0x02, r24	; 2
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <kontrolli>:

void kontrolli() {
	while(!(UCSR1A & (1 << UDRE1)));
  ce:	e8 ec       	ldi	r30, 0xC8	; 200
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	85 ff       	sbrs	r24, 5
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <kontrolli+0x4>
	
}
  d8:	08 95       	ret

000000da <main>:
void saada(char num);

int main(void) {
	
	//UART init
	UBRR1 = 12;
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
  e2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1B = (1 << TXEN1)|(1 << RXEN1)|(1 << RXCIE1);
  e6:	88 e9       	ldi	r24, 0x98	; 152
  e8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1 << UCSZ11)|(1 << UCSZ10);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
	//LED init
	DDRA = 0xff;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	81 b9       	out	0x01, r24	; 1
	//Timer init
	TCNT1 = 0x00;
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 2000;
  fe:	80 ed       	ldi	r24, 0xD0	; 208
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 106:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1 << OCIE1A); //COMPARE MATCH INTERRUPT ENABLE
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = (1 << CS12)|(1 << CS10)|(1 << WGM12); //Prescaler 1024 CTC MODE
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sei(); //Enable global interrupts by setting SREG
 116:	78 94       	sei
		}
	}

void saada(char num) {
	kontrolli();
	UDR1 = num;
 118:	ce ec       	ldi	r28, 0xCE	; 206
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	0f 2e       	mov	r0, r31
 11e:	f2 e5       	ldi	r31, 0x52	; 82
 120:	ef 2e       	mov	r14, r31
 122:	f0 2d       	mov	r31, r0
 124:	0f 2e       	mov	r0, r31
 126:	f1 e6       	ldi	r31, 0x61	; 97
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	0c e6       	ldi	r16, 0x6C	; 108
 12e:	16 e6       	ldi	r17, 0x66	; 102
			PORTA = 0xff;
		}
	}

void saada(char num) {
	kontrolli();
 130:	0e 94 67 00 	call	0xce	; 0xce <kontrolli>
	UDR1 = num;
 134:	e8 82       	st	Y, r14
			PORTA = 0xff;
		}
	}

void saada(char num) {
	kontrolli();
 136:	0e 94 67 00 	call	0xce	; 0xce <kontrolli>
	UDR1 = num;
 13a:	f8 82       	st	Y, r15
			PORTA = 0xff;
		}
	}

void saada(char num) {
	kontrolli();
 13c:	0e 94 67 00 	call	0xce	; 0xce <kontrolli>
	UDR1 = num;
 140:	08 83       	st	Y, r16
			PORTA = 0xff;
		}
	}

void saada(char num) {
	kontrolli();
 142:	0e 94 67 00 	call	0xce	; 0xce <kontrolli>
	UDR1 = num;
 146:	18 83       	st	Y, r17
 148:	f3 cf       	rjmp	.-26     	; 0x130 <main+0x56>

0000014a <__vector_25>:

void kontrolli() {
	while(!(UCSR1A & (1 << UDRE1)));
	
}
ISR(USART1_RX_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	while(!(UCSR1A & (1 << RXC1)));{
 15c:	e8 ec       	ldi	r30, 0xC8	; 200
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 23       	and	r24, r24
 164:	ec f7       	brge	.-6      	; 0x160 <__vector_25+0x16>
		
	}
	char receivedData;
	//int x;
	receivedData = UDR1;
 166:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
	if(receivedData == '0'){
 16a:	80 33       	cpi	r24, 0x30	; 48
 16c:	21 f4       	brne	.+8      	; 0x176 <__vector_25+0x2c>
		TIMSK1 = 0;
 16e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		PORTA = 0;
 172:	12 b8       	out	0x02, r1	; 2
 174:	95 c0       	rjmp	.+298    	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '1')){
 176:	81 33       	cpi	r24, 0x31	; 49
 178:	71 f4       	brne	.+28     	; 0x196 <__vector_25+0x4c>
		TIMSK1 = (1<<OCIE1A);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/1;
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 194:	85 c0       	rjmp	.+266    	; 0x2a0 <__vector_25+0x156>
		}
	else if ((receivedData == '2')){
 196:	82 33       	cpi	r24, 0x32	; 50
 198:	71 f4       	brne	.+28     	; 0x1b6 <__vector_25+0x6c>
		TIMSK1 = (1<<OCIE1A);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 1a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/2;
 1a8:	88 ee       	ldi	r24, 0xE8	; 232
 1aa:	93 e0       	ldi	r25, 0x03	; 3
 1ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1b4:	75 c0       	rjmp	.+234    	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '3')){
 1b6:	83 33       	cpi	r24, 0x33	; 51
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <__vector_25+0x8c>
		TIMSK1 = (1<<OCIE1A);
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 1c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/3;
 1c8:	8a e9       	ldi	r24, 0x9A	; 154
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1d4:	65 c0       	rjmp	.+202    	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '4')){
 1d6:	84 33       	cpi	r24, 0x34	; 52
 1d8:	71 f4       	brne	.+28     	; 0x1f6 <__vector_25+0xac>
		TIMSK1 = (1<<OCIE1A);
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 1e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/4;
 1e8:	84 ef       	ldi	r24, 0xF4	; 244
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1f4:	55 c0       	rjmp	.+170    	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '5')){
 1f6:	85 33       	cpi	r24, 0x35	; 53
 1f8:	71 f4       	brne	.+28     	; 0x216 <__vector_25+0xcc>
		TIMSK1 = (1<<OCIE1A);
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 200:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 204:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/5;
 208:	80 e9       	ldi	r24, 0x90	; 144
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 210:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 214:	45 c0       	rjmp	.+138    	; 0x2a0 <__vector_25+0x156>
	}	
	else if ((receivedData == '6')){
 216:	86 33       	cpi	r24, 0x36	; 54
 218:	71 f4       	brne	.+28     	; 0x236 <__vector_25+0xec>
		TIMSK1 = (1<<OCIE1A);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 220:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 224:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/6;
 228:	8d e4       	ldi	r24, 0x4D	; 77
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 230:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 234:	35 c0       	rjmp	.+106    	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '7')){
 236:	87 33       	cpi	r24, 0x37	; 55
 238:	71 f4       	brne	.+28     	; 0x256 <__vector_25+0x10c>
		TIMSK1 = (1<<OCIE1A);
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 240:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 244:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/7;
 248:	8d e1       	ldi	r24, 0x1D	; 29
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 254:	25 c0       	rjmp	.+74     	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '8')){
 256:	88 33       	cpi	r24, 0x38	; 56
 258:	71 f4       	brne	.+28     	; 0x276 <__vector_25+0x12c>
		TIMSK1 = (1<<OCIE1A);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 260:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 264:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/8;
 268:	8a ef       	ldi	r24, 0xFA	; 250
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 274:	15 c0       	rjmp	.+42     	; 0x2a0 <__vector_25+0x156>
	}
	else if ((receivedData == '9')){
 276:	89 33       	cpi	r24, 0x39	; 57
 278:	71 f4       	brne	.+28     	; 0x296 <__vector_25+0x14c>
		TIMSK1 = (1<<OCIE1A);
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
 280:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 284:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A = 2000/9;
 288:	8e ed       	ldi	r24, 0xDE	; 222
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 290:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <__vector_25+0x156>
	}
		else if((receivedData == 'X')){
 296:	88 35       	cpi	r24, 0x58	; 88
 298:	19 f4       	brne	.+6      	; 0x2a0 <__vector_25+0x156>
			TCCR0B = 0;
 29a:	15 bc       	out	0x25, r1	; 37
			PORTA = 0xff;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	82 b9       	out	0x02, r24	; 2
		}
	}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
