
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000046e  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  00000508  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001037  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1b  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004da  00000000  00000000  00002342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000281c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000377  00000000  00000000  00002f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000032b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e6       	ldi	r30, 0x6E	; 110
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a6 30       	cpi	r26, 0x06	; 6
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a6 e0       	ldi	r26, 0x06	; 6
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 31       	cpi	r26, 0x10	; 16
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  ce:	0c 94 35 02 	jmp	0x46a	; 0x46a <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_Init>:
	if(PortValue & 0x20) {
		return 0;
	} else {
		return 1;
	}
}
  d6:	82 e6       	ldi	r24, 0x62	; 98
  d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  dc:	84 ec       	ldi	r24, 0xC4	; 196
  de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e2:	08 95       	ret

000000e4 <NewDelayValue>:
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 fd       	sbrc	r24, 6
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <NewDelayValue+0x4>
  ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f2:	24 e6       	ldi	r18, 0x64	; 100
  f4:	82 9f       	mul	r24, r18
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	08 95       	ret

000000fc <delay>:
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	59 f4       	brne	.+22     	; 0x116 <delay+0x1a>
 100:	08 95       	ret
 102:	00 00       	nop
 104:	21 50       	subi	r18, 0x01	; 1
 106:	31 09       	sbc	r19, r1
 108:	e1 f7       	brne	.-8      	; 0x102 <delay+0x6>
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	84 17       	cp	r24, r20
 110:	95 07       	cpc	r25, r21
 112:	19 f4       	brne	.+6      	; 0x11a <delay+0x1e>
 114:	08 95       	ret
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	28 ec       	ldi	r18, 0xC8	; 200
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f1 cf       	rjmp	.-30     	; 0x102 <delay+0x6>

00000120 <Start_Beep>:
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	84 b9       	out	0x04, r24	; 4
 124:	20 ed       	ldi	r18, 0xD0	; 208
 126:	37 e0       	ldi	r19, 0x07	; 7
 128:	90 e4       	ldi	r25, 0x40	; 64
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	89 27       	eor	r24, r25
 12e:	85 b9       	out	0x05, r24	; 5
 130:	8a ea       	ldi	r24, 0xAA	; 170
 132:	81 50       	subi	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <Start_Beep+0x12>
 136:	21 50       	subi	r18, 0x01	; 1
 138:	31 09       	sbc	r19, r1
 13a:	b9 f7       	brne	.-18     	; 0x12a <Start_Beep+0xa>
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret

00000142 <Lose_Beep>:
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	cc e2       	ldi	r28, 0x2C	; 44
 14e:	d1 e0       	ldi	r29, 0x01	; 1
 150:	10 e4       	ldi	r17, 0x40	; 64
 152:	85 b1       	in	r24, 0x05	; 5
 154:	81 27       	eor	r24, r17
 156:	85 b9       	out	0x05, r24	; 5
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	81 50       	subi	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <Lose_Beep+0x20>
 166:	21 97       	sbiw	r28, 0x01	; 1
 168:	a1 f7       	brne	.-24     	; 0x152 <Lose_Beep+0x10>
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	08 95       	ret

00000176 <RandomNumber>:
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 182:	0e 94 c7 01 	call	0x38e	; 0x38e <srand>
 186:	c8 e0       	ldi	r28, 0x08	; 8
 188:	d1 e0       	ldi	r29, 0x01	; 1
 18a:	00 e1       	ldi	r16, 0x10	; 16
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	0e 94 c2 01 	call	0x384	; 0x384 <rand>
 192:	81 70       	andi	r24, 0x01	; 1
 194:	90 78       	andi	r25, 0x80	; 128
 196:	99 23       	and	r25, r25
 198:	24 f4       	brge	.+8      	; 0x1a2 <RandomNumber+0x2c>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	8e 6f       	ori	r24, 0xFE	; 254
 19e:	9f 6f       	ori	r25, 0xFF	; 255
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	89 93       	st	Y+, r24
 1a4:	c0 17       	cp	r28, r16
 1a6:	d1 07       	cpc	r29, r17
 1a8:	91 f7       	brne	.-28     	; 0x18e <RandomNumber+0x18>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <PlayDemo>:
 1b4:	0e 94 90 00 	call	0x120	; 0x120 <Start_Beep>
 1b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1bc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	91 05       	cpc	r25, r1
 1c4:	bc f5       	brge	.+110    	; 0x234 <PlayDemo+0x80>
 1c6:	fc 01       	movw	r30, r24
 1c8:	e8 5f       	subi	r30, 0xF8	; 248
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	80 81       	ld	r24, Z
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	49 f0       	breq	.+18     	; 0x1e4 <PlayDemo+0x30>
 1d2:	81 11       	cpse	r24, r1
 1d4:	21 c0       	rjmp	.+66     	; 0x218 <PlayDemo+0x64>
 1d6:	14 c0       	rjmp	.+40     	; 0x200 <PlayDemo+0x4c>
 1d8:	fc 01       	movw	r30, r24
 1da:	e8 5f       	subi	r30, 0xF8	; 248
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	80 81       	ld	r24, Z
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	61 f4       	brne	.+24     	; 0x1fc <PlayDemo+0x48>
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	82 b9       	out	0x02, r24	; 2
 1e8:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 1ec:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 1f0:	12 b8       	out	0x02, r1	; 2
 1f2:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 1f6:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 1fa:	08 95       	ret
 1fc:	81 11       	cpse	r24, r1
 1fe:	0c c0       	rjmp	.+24     	; 0x218 <PlayDemo+0x64>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	82 b9       	out	0x02, r24	; 2
 204:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 208:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 20c:	12 b8       	out	0x02, r1	; 2
 20e:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 212:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 216:	08 95       	ret
 218:	0e 94 da 00 	call	0x1b4	; 0x1b4 <PlayDemo>
 21c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 220:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 22a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	91 05       	cpc	r25, r1
 232:	94 f2       	brlt	.-92     	; 0x1d8 <PlayDemo+0x24>
 234:	08 95       	ret

00000236 <isButtonPressed>:

uint8_t isButtonPressed(uint8_t PortValue) {
	return isLeftButtonPressed(PortValue) || isRightButtonPressed(PortValue);
 236:	85 ff       	sbrs	r24, 5
 238:	06 c0       	rjmp	.+12     	; 0x246 <isButtonPressed+0x10>
 23a:	83 fb       	bst	r24, 3
 23c:	88 27       	eor	r24, r24
 23e:	80 f9       	bld	r24, 0
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	89 27       	eor	r24, r25
 244:	08 95       	ret
 246:	81 e0       	ldi	r24, 0x01	; 1
}
 248:	08 95       	ret

0000024a <waitForPress>:
	LEFT = 1,
	RIGHT= 0	
};


enum Button waitForPress() {
 24a:	cf 93       	push	r28
	/* Kuidas lugeda PINB v??rtust ja teha midagi ainult siis kui bit 2 on k?rge
		if(PINB & 0x04) { (teha midagi) }
	*/
	uint8_t x = PINF;
 24c:	cf b1       	in	r28, 0x0f	; 15
	// 1 0 | 0 --> ???? ????????? ? ????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 1 | 0 --> ???? ????????? ? ?????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 0 | 0 --> ???? ?? ??? ???? ?????????, ?????? ??? ????????? ( aka ???????? )
	//////////////////////////////////////////////////////////////////////
	// ???? ?? ????? ???????????? ???? ??????, ?????? ?? ??????
	while(!isButtonPressed(x)) {
 24e:	01 c0       	rjmp	.+2      	; 0x252 <waitForPress+0x8>
		x = PINF;
 250:	cf b1       	in	r28, 0x0f	; 15
	// 1 0 | 0 --> ???? ????????? ? ????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 1 | 0 --> ???? ????????? ? ?????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 0 | 0 --> ???? ?? ??? ???? ?????????, ?????? ??? ????????? ( aka ???????? )
	//////////////////////////////////////////////////////////////////////
	// ???? ?? ????? ???????????? ???? ??????, ?????? ?? ??????
	while(!isButtonPressed(x)) {
 252:	8c 2f       	mov	r24, r28
 254:	0e 94 1b 01 	call	0x236	; 0x236 <isButtonPressed>
 258:	88 23       	and	r24, r24
 25a:	d1 f3       	breq	.-12     	; 0x250 <waitForPress+0x6>
		x = PINF;
	}
	// Debouncing
	delay(50); 
 25c:	82 e3       	ldi	r24, 0x32	; 50
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
	while(isButtonPressed(PINF)) {
 264:	8f b1       	in	r24, 0x0f	; 15
 266:	0e 94 1b 01 	call	0x236	; 0x236 <isButtonPressed>
 26a:	81 11       	cpse	r24, r1
 26c:	fb cf       	rjmp	.-10     	; 0x264 <waitForPress+0x1a>
	if(isRightButtonPressed(x)) {
		return RIGHT;	
	} else {
		return LEFT;
	}
}
 26e:	c3 fb       	bst	r28, 3
 270:	88 27       	eor	r24, r24
 272:	80 f9       	bld	r24, 0
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <main>:

int main(void) {
	MCUCR |= 0x80;
 278:	85 b7       	in	r24, 0x35	; 53
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= 0x80;
 27e:	85 b7       	in	r24, 0x35	; 53
 280:	80 68       	ori	r24, 0x80	; 128
 282:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
 288:	84 b9       	out	0x04, r24	; 4
	// 0x20 / 0x08 --> Joystick
	PORTF = 0x28;
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	81 bb       	out	0x11, r24	; 17
	
	ADC_Init();
 28e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_Init>

	RandomNumber();
 292:	0e 94 bb 00 	call	0x176	; 0x176 <RandomNumber>
	PlayDemo();
 296:	0e 94 da 00 	call	0x1b4	; 0x1b4 <PlayDemo>
 29a:	0f 2e       	mov	r0, r31
 29c:	f0 e1       	ldi	r31, 0x10	; 16
 29e:	ef 2e       	mov	r14, r31
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	ff 2e       	mov	r15, r31
 2a4:	f0 2d       	mov	r31, r0
		}
		*/
		for(uint8_t index = 0; index < 8; index++) {
			enum Button btn = waitForPress();
			if(btn == Game[index]) {
				PORTA = 0xFF;
 2a6:	1f ef       	ldi	r17, 0xFF	; 255
 2a8:	c8 e0       	ldi	r28, 0x08	; 8
 2aa:	d1 e0       	ldi	r29, 0x01	; 1
		} else {
			PORTA = 0x00;	
		}
		*/
		for(uint8_t index = 0; index < 8; index++) {
			enum Button btn = waitForPress();
 2ac:	0e 94 25 01 	call	0x24a	; 0x24a <waitForPress>
			if(btn == Game[index]) {
 2b0:	99 91       	ld	r25, Y+
 2b2:	89 13       	cpse	r24, r25
 2b4:	17 c0       	rjmp	.+46     	; 0x2e4 <main+0x6c>
				PORTA = 0xFF;
 2b6:	12 b9       	out	0x02, r17	; 2
				delay(n);
 2b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <n>
 2bc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <n+0x1>
 2c0:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
				PORTA = 0x00;
 2c4:	12 b8       	out	0x02, r1	; 2
				i++;
 2c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 2d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
				PlayDemo();
 2d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <PlayDemo>
			PORTA = 0x80;
		} else {
			PORTA = 0x00;	
		}
		*/
		for(uint8_t index = 0; index < 8; index++) {
 2dc:	ce 15       	cp	r28, r14
 2de:	df 05       	cpc	r29, r15
 2e0:	29 f7       	brne	.-54     	; 0x2ac <main+0x34>
 2e2:	e2 cf       	rjmp	.-60     	; 0x2a8 <main+0x30>
				delay(n);
				PORTA = 0x00;
				i++;
				PlayDemo();
			} else if(btn != Game[index]) {
				PORTA = 0xFF;
 2e4:	12 b9       	out	0x02, r17	; 2
				Lose_Beep();
 2e6:	0e 94 a1 00 	call	0x142	; 0x142 <Lose_Beep>
				break;
 2ea:	de cf       	rjmp	.-68     	; 0x2a8 <main+0x30>

000002ec <do_rand>:
 2ec:	8f 92       	push	r8
 2ee:	9f 92       	push	r9
 2f0:	af 92       	push	r10
 2f2:	bf 92       	push	r11
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	68 81       	ld	r22, Y
 304:	79 81       	ldd	r23, Y+1	; 0x01
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	9b 81       	ldd	r25, Y+3	; 0x03
 30a:	61 15       	cp	r22, r1
 30c:	71 05       	cpc	r23, r1
 30e:	81 05       	cpc	r24, r1
 310:	91 05       	cpc	r25, r1
 312:	21 f4       	brne	.+8      	; 0x31c <do_rand+0x30>
 314:	64 e2       	ldi	r22, 0x24	; 36
 316:	79 ed       	ldi	r23, 0xD9	; 217
 318:	8b e5       	ldi	r24, 0x5B	; 91
 31a:	97 e0       	ldi	r25, 0x07	; 7
 31c:	2d e1       	ldi	r18, 0x1D	; 29
 31e:	33 ef       	ldi	r19, 0xF3	; 243
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__divmodsi4>
 328:	49 01       	movw	r8, r18
 32a:	5a 01       	movw	r10, r20
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	a7 ea       	ldi	r26, 0xA7	; 167
 332:	b1 e4       	ldi	r27, 0x41	; 65
 334:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__muluhisi3>
 338:	6b 01       	movw	r12, r22
 33a:	7c 01       	movw	r14, r24
 33c:	ac ee       	ldi	r26, 0xEC	; 236
 33e:	b4 ef       	ldi	r27, 0xF4	; 244
 340:	a5 01       	movw	r20, r10
 342:	94 01       	movw	r18, r8
 344:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__mulohisi3>
 348:	dc 01       	movw	r26, r24
 34a:	cb 01       	movw	r24, r22
 34c:	8c 0d       	add	r24, r12
 34e:	9d 1d       	adc	r25, r13
 350:	ae 1d       	adc	r26, r14
 352:	bf 1d       	adc	r27, r15
 354:	b7 ff       	sbrs	r27, 7
 356:	03 c0       	rjmp	.+6      	; 0x35e <do_rand+0x72>
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	a1 09       	sbc	r26, r1
 35c:	b0 48       	sbci	r27, 0x80	; 128
 35e:	88 83       	st	Y, r24
 360:	99 83       	std	Y+1, r25	; 0x01
 362:	aa 83       	std	Y+2, r26	; 0x02
 364:	bb 83       	std	Y+3, r27	; 0x03
 366:	9f 77       	andi	r25, 0x7F	; 127
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	bf 90       	pop	r11
 376:	af 90       	pop	r10
 378:	9f 90       	pop	r9
 37a:	8f 90       	pop	r8
 37c:	08 95       	ret

0000037e <rand_r>:
 37e:	0e 94 76 01 	call	0x2ec	; 0x2ec <do_rand>
 382:	08 95       	ret

00000384 <rand>:
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 76 01 	call	0x2ec	; 0x2ec <do_rand>
 38c:	08 95       	ret

0000038e <srand>:
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 396:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 39a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 39e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3a2:	08 95       	ret

000003a4 <__divmodsi4>:
 3a4:	05 2e       	mov	r0, r21
 3a6:	97 fb       	bst	r25, 7
 3a8:	1e f4       	brtc	.+6      	; 0x3b0 <__divmodsi4+0xc>
 3aa:	00 94       	com	r0
 3ac:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__negsi2>
 3b0:	57 fd       	sbrc	r21, 7
 3b2:	07 d0       	rcall	.+14     	; 0x3c2 <__divmodsi4_neg2>
 3b4:	0e 94 04 02 	call	0x408	; 0x408 <__udivmodsi4>
 3b8:	07 fc       	sbrc	r0, 7
 3ba:	03 d0       	rcall	.+6      	; 0x3c2 <__divmodsi4_neg2>
 3bc:	4e f4       	brtc	.+18     	; 0x3d0 <__divmodsi4_exit>
 3be:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__negsi2>

000003c2 <__divmodsi4_neg2>:
 3c2:	50 95       	com	r21
 3c4:	40 95       	com	r20
 3c6:	30 95       	com	r19
 3c8:	21 95       	neg	r18
 3ca:	3f 4f       	sbci	r19, 0xFF	; 255
 3cc:	4f 4f       	sbci	r20, 0xFF	; 255
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255

000003d0 <__divmodsi4_exit>:
 3d0:	08 95       	ret

000003d2 <__negsi2>:
 3d2:	90 95       	com	r25
 3d4:	80 95       	com	r24
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <__muluhisi3>:
 3e2:	0e 94 26 02 	call	0x44c	; 0x44c <__umulhisi3>
 3e6:	a5 9f       	mul	r26, r21
 3e8:	90 0d       	add	r25, r0
 3ea:	b4 9f       	mul	r27, r20
 3ec:	90 0d       	add	r25, r0
 3ee:	a4 9f       	mul	r26, r20
 3f0:	80 0d       	add	r24, r0
 3f2:	91 1d       	adc	r25, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	08 95       	ret

000003f8 <__mulshisi3>:
 3f8:	b7 ff       	sbrs	r27, 7
 3fa:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__muluhisi3>

000003fe <__mulohisi3>:
 3fe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__muluhisi3>
 402:	82 1b       	sub	r24, r18
 404:	93 0b       	sbc	r25, r19
 406:	08 95       	ret

00000408 <__udivmodsi4>:
 408:	a1 e2       	ldi	r26, 0x21	; 33
 40a:	1a 2e       	mov	r1, r26
 40c:	aa 1b       	sub	r26, r26
 40e:	bb 1b       	sub	r27, r27
 410:	fd 01       	movw	r30, r26
 412:	0d c0       	rjmp	.+26     	; 0x42e <__udivmodsi4_ep>

00000414 <__udivmodsi4_loop>:
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27
 418:	ee 1f       	adc	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	a2 17       	cp	r26, r18
 41e:	b3 07       	cpc	r27, r19
 420:	e4 07       	cpc	r30, r20
 422:	f5 07       	cpc	r31, r21
 424:	20 f0       	brcs	.+8      	; 0x42e <__udivmodsi4_ep>
 426:	a2 1b       	sub	r26, r18
 428:	b3 0b       	sbc	r27, r19
 42a:	e4 0b       	sbc	r30, r20
 42c:	f5 0b       	sbc	r31, r21

0000042e <__udivmodsi4_ep>:
 42e:	66 1f       	adc	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	1a 94       	dec	r1
 438:	69 f7       	brne	.-38     	; 0x414 <__udivmodsi4_loop>
 43a:	60 95       	com	r22
 43c:	70 95       	com	r23
 43e:	80 95       	com	r24
 440:	90 95       	com	r25
 442:	9b 01       	movw	r18, r22
 444:	ac 01       	movw	r20, r24
 446:	bd 01       	movw	r22, r26
 448:	cf 01       	movw	r24, r30
 44a:	08 95       	ret

0000044c <__umulhisi3>:
 44c:	a2 9f       	mul	r26, r18
 44e:	b0 01       	movw	r22, r0
 450:	b3 9f       	mul	r27, r19
 452:	c0 01       	movw	r24, r0
 454:	a3 9f       	mul	r26, r19
 456:	70 0d       	add	r23, r0
 458:	81 1d       	adc	r24, r1
 45a:	11 24       	eor	r1, r1
 45c:	91 1d       	adc	r25, r1
 45e:	b2 9f       	mul	r27, r18
 460:	70 0d       	add	r23, r0
 462:	81 1d       	adc	r24, r1
 464:	11 24       	eor	r1, r1
 466:	91 1d       	adc	r25, r1
 468:	08 95       	ret

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
