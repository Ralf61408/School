
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001037  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1b  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e0  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000377  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000032cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e7       	ldi	r30, 0x7E	; 126
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a6 30       	cpi	r26, 0x06	; 6
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a6 e0       	ldi	r26, 0x06	; 6
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 31       	cpi	r26, 0x10	; 16
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 44 01 	call	0x288	; 0x288 <main>
  ce:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_Init>:
	if(PortValue & 0x20) {
		return 0;
	} else {
		return 1;
	}
}
  d6:	82 e6       	ldi	r24, 0x62	; 98
  d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  dc:	84 ec       	ldi	r24, 0xC4	; 196
  de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e2:	08 95       	ret

000000e4 <NewDelayValue>:
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 fd       	sbrc	r24, 6
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <NewDelayValue+0x4>
  ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f2:	82 95       	swap	r24
  f4:	86 95       	lsr	r24
  f6:	87 70       	andi	r24, 0x07	; 7
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	24 e6       	ldi	r18, 0x64	; 100
  fe:	ac 01       	movw	r20, r24
 100:	24 9f       	mul	r18, r20
 102:	c0 01       	movw	r24, r0
 104:	25 9f       	mul	r18, r21
 106:	90 0d       	add	r25, r0
 108:	11 24       	eor	r1, r1
 10a:	08 95       	ret

0000010c <delay>:
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	59 f4       	brne	.+22     	; 0x126 <delay+0x1a>
 110:	08 95       	ret
 112:	00 00       	nop
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
 118:	e1 f7       	brne	.-8      	; 0x112 <delay+0x6>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	84 17       	cp	r24, r20
 120:	95 07       	cpc	r25, r21
 122:	19 f4       	brne	.+6      	; 0x12a <delay+0x1e>
 124:	08 95       	ret
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	28 ec       	ldi	r18, 0xC8	; 200
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f1 cf       	rjmp	.-30     	; 0x112 <delay+0x6>

00000130 <Start_Beep>:
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	84 b9       	out	0x04, r24	; 4
 134:	20 ed       	ldi	r18, 0xD0	; 208
 136:	37 e0       	ldi	r19, 0x07	; 7
 138:	90 e4       	ldi	r25, 0x40	; 64
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	89 27       	eor	r24, r25
 13e:	85 b9       	out	0x05, r24	; 5
 140:	8a ea       	ldi	r24, 0xAA	; 170
 142:	81 50       	subi	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <Start_Beep+0x12>
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
 14a:	b9 f7       	brne	.-18     	; 0x13a <Start_Beep+0xa>
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <Lose_Beep>:
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	84 b9       	out	0x04, r24	; 4
 15c:	cc e2       	ldi	r28, 0x2C	; 44
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	10 e4       	ldi	r17, 0x40	; 64
 162:	85 b1       	in	r24, 0x05	; 5
 164:	81 27       	eor	r24, r17
 166:	85 b9       	out	0x05, r24	; 5
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	81 50       	subi	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <Lose_Beep+0x20>
 176:	21 97       	sbiw	r28, 0x01	; 1
 178:	a1 f7       	brne	.-24     	; 0x162 <Lose_Beep+0x10>
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <RandomNumber>:
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 192:	0e 94 cf 01 	call	0x39e	; 0x39e <srand>
 196:	c8 e0       	ldi	r28, 0x08	; 8
 198:	d1 e0       	ldi	r29, 0x01	; 1
 19a:	00 e1       	ldi	r16, 0x10	; 16
 19c:	11 e0       	ldi	r17, 0x01	; 1
 19e:	0e 94 ca 01 	call	0x394	; 0x394 <rand>
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	90 78       	andi	r25, 0x80	; 128
 1a6:	99 23       	and	r25, r25
 1a8:	24 f4       	brge	.+8      	; 0x1b2 <RandomNumber+0x2c>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	8e 6f       	ori	r24, 0xFE	; 254
 1ae:	9f 6f       	ori	r25, 0xFF	; 255
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	89 93       	st	Y+, r24
 1b4:	c0 17       	cp	r28, r16
 1b6:	d1 07       	cpc	r29, r17
 1b8:	91 f7       	brne	.-28     	; 0x19e <RandomNumber+0x18>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <PlayDemo>:
 1c4:	0e 94 98 00 	call	0x130	; 0x130 <Start_Beep>
 1c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1cc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1d0:	88 30       	cpi	r24, 0x08	; 8
 1d2:	91 05       	cpc	r25, r1
 1d4:	bc f5       	brge	.+110    	; 0x244 <PlayDemo+0x80>
 1d6:	fc 01       	movw	r30, r24
 1d8:	e8 5f       	subi	r30, 0xF8	; 248
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 81       	ld	r24, Z
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	49 f0       	breq	.+18     	; 0x1f4 <PlayDemo+0x30>
 1e2:	81 11       	cpse	r24, r1
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <PlayDemo+0x64>
 1e6:	14 c0       	rjmp	.+40     	; 0x210 <PlayDemo+0x4c>
 1e8:	fc 01       	movw	r30, r24
 1ea:	e8 5f       	subi	r30, 0xF8	; 248
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	80 81       	ld	r24, Z
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	61 f4       	brne	.+24     	; 0x20c <PlayDemo+0x48>
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	82 b9       	out	0x02, r24	; 2
 1f8:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 1fc:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
 200:	12 b8       	out	0x02, r1	; 2
 202:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 206:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
 20a:	08 95       	ret
 20c:	81 11       	cpse	r24, r1
 20e:	0c c0       	rjmp	.+24     	; 0x228 <PlayDemo+0x64>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	82 b9       	out	0x02, r24	; 2
 214:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 218:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
 21c:	12 b8       	out	0x02, r1	; 2
 21e:	0e 94 72 00 	call	0xe4	; 0xe4 <NewDelayValue>
 222:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
 226:	08 95       	ret
 228:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <PlayDemo>
 22c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 230:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 23a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	91 05       	cpc	r25, r1
 242:	94 f2       	brlt	.-92     	; 0x1e8 <PlayDemo+0x24>
 244:	08 95       	ret

00000246 <isButtonPressed>:

uint8_t isButtonPressed(uint8_t PortValue) {
	return isLeftButtonPressed(PortValue) || isRightButtonPressed(PortValue);
 246:	85 ff       	sbrs	r24, 5
 248:	06 c0       	rjmp	.+12     	; 0x256 <isButtonPressed+0x10>
 24a:	83 fb       	bst	r24, 3
 24c:	88 27       	eor	r24, r24
 24e:	80 f9       	bld	r24, 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	89 27       	eor	r24, r25
 254:	08 95       	ret
 256:	81 e0       	ldi	r24, 0x01	; 1
}
 258:	08 95       	ret

0000025a <waitForPress>:
	LEFT = 1,
	RIGHT= 0	
};


enum Button waitForPress() {
 25a:	cf 93       	push	r28
	/* Kuidas lugeda PINB v??rtust ja teha midagi ainult siis kui bit 2 on k?rge
		if(PINB & 0x04) { (teha midagi) }
	*/
	uint8_t x = PINF;
 25c:	cf b1       	in	r28, 0x0f	; 15
	// 1 0 | 0 --> ???? ????????? ? ????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 1 | 0 --> ???? ????????? ? ?????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 0 | 0 --> ???? ?? ??? ???? ?????????, ?????? ??? ????????? ( aka ???????? )
	//////////////////////////////////////////////////////////////////////
	// ???? ?? ????? ???????????? ???? ??????, ?????? ?? ??????
	while(!isButtonPressed(x)) {
 25e:	01 c0       	rjmp	.+2      	; 0x262 <waitForPress+0x8>
		x = PINF;
 260:	cf b1       	in	r28, 0x0f	; 15
	// 1 0 | 0 --> ???? ????????? ? ????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 1 | 0 --> ???? ????????? ? ?????? ???????, ?????? ???????? ? ?? ?????? ?????? ???? 0 ( aka ???????? )
	// 0 0 | 0 --> ???? ?? ??? ???? ?????????, ?????? ??? ????????? ( aka ???????? )
	//////////////////////////////////////////////////////////////////////
	// ???? ?? ????? ???????????? ???? ??????, ?????? ?? ??????
	while(!isButtonPressed(x)) {
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 23 01 	call	0x246	; 0x246 <isButtonPressed>
 268:	88 23       	and	r24, r24
 26a:	d1 f3       	breq	.-12     	; 0x260 <waitForPress+0x6>
		x = PINF;
	}
	// Debouncing
	delay(50); 
 26c:	82 e3       	ldi	r24, 0x32	; 50
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
	while(isButtonPressed(PINF)) {
 274:	8f b1       	in	r24, 0x0f	; 15
 276:	0e 94 23 01 	call	0x246	; 0x246 <isButtonPressed>
 27a:	81 11       	cpse	r24, r1
 27c:	fb cf       	rjmp	.-10     	; 0x274 <waitForPress+0x1a>
	if(isRightButtonPressed(x)) {
		return RIGHT;	
	} else {
		return LEFT;
	}
}
 27e:	c3 fb       	bst	r28, 3
 280:	88 27       	eor	r24, r24
 282:	80 f9       	bld	r24, 0
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <main>:

int main(void) {
	MCUCR |= 0x80;
 288:	85 b7       	in	r24, 0x35	; 53
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= 0x80;
 28e:	85 b7       	in	r24, 0x35	; 53
 290:	80 68       	ori	r24, 0x80	; 128
 292:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
 298:	84 b9       	out	0x04, r24	; 4
	// 0x20 / 0x08 --> Joystick
	PORTF = 0x28;
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	81 bb       	out	0x11, r24	; 17
	
	ADC_Init();
 29e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_Init>

	RandomNumber();
 2a2:	0e 94 c3 00 	call	0x186	; 0x186 <RandomNumber>
	PlayDemo();
 2a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <PlayDemo>
 2aa:	0f 2e       	mov	r0, r31
 2ac:	f0 e1       	ldi	r31, 0x10	; 16
 2ae:	ef 2e       	mov	r14, r31
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	ff 2e       	mov	r15, r31
 2b4:	f0 2d       	mov	r31, r0
		}
		*/
		for(uint8_t index = 0; index < 8; index++) {
			enum Button btn = waitForPress();
			if(btn == Game[index]) {
				PORTA = 0xFF;
 2b6:	1f ef       	ldi	r17, 0xFF	; 255
 2b8:	c8 e0       	ldi	r28, 0x08	; 8
 2ba:	d1 e0       	ldi	r29, 0x01	; 1
		} else {
			PORTA = 0x00;	
		}
		*/
		for(uint8_t index = 0; index < 8; index++) {
			enum Button btn = waitForPress();
 2bc:	0e 94 2d 01 	call	0x25a	; 0x25a <waitForPress>
			if(btn == Game[index]) {
 2c0:	99 91       	ld	r25, Y+
 2c2:	89 13       	cpse	r24, r25
 2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <main+0x6c>
				PORTA = 0xFF;
 2c6:	12 b9       	out	0x02, r17	; 2
				delay(n);
 2c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <n>
 2cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <n+0x1>
 2d0:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
				PORTA = 0x00;
 2d4:	12 b8       	out	0x02, r1	; 2
				i++;
 2d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 2e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
				PlayDemo();
 2e8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <PlayDemo>
			PORTA = 0x80;
		} else {
			PORTA = 0x00;	
		}
		*/
		for(uint8_t index = 0; index < 8; index++) {
 2ec:	ce 15       	cp	r28, r14
 2ee:	df 05       	cpc	r29, r15
 2f0:	29 f7       	brne	.-54     	; 0x2bc <main+0x34>
 2f2:	e2 cf       	rjmp	.-60     	; 0x2b8 <main+0x30>
				delay(n);
				PORTA = 0x00;
				i++;
				PlayDemo();
			} else if(btn != Game[index]) {
				PORTA = 0xFF;
 2f4:	12 b9       	out	0x02, r17	; 2
				Lose_Beep();
 2f6:	0e 94 a9 00 	call	0x152	; 0x152 <Lose_Beep>
				break;
 2fa:	de cf       	rjmp	.-68     	; 0x2b8 <main+0x30>

000002fc <do_rand>:
 2fc:	8f 92       	push	r8
 2fe:	9f 92       	push	r9
 300:	af 92       	push	r10
 302:	bf 92       	push	r11
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
 312:	68 81       	ld	r22, Y
 314:	79 81       	ldd	r23, Y+1	; 0x01
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	81 05       	cpc	r24, r1
 320:	91 05       	cpc	r25, r1
 322:	21 f4       	brne	.+8      	; 0x32c <do_rand+0x30>
 324:	64 e2       	ldi	r22, 0x24	; 36
 326:	79 ed       	ldi	r23, 0xD9	; 217
 328:	8b e5       	ldi	r24, 0x5B	; 91
 32a:	97 e0       	ldi	r25, 0x07	; 7
 32c:	2d e1       	ldi	r18, 0x1D	; 29
 32e:	33 ef       	ldi	r19, 0xF3	; 243
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divmodsi4>
 338:	49 01       	movw	r8, r18
 33a:	5a 01       	movw	r10, r20
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	a7 ea       	ldi	r26, 0xA7	; 167
 342:	b1 e4       	ldi	r27, 0x41	; 65
 344:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__muluhisi3>
 348:	6b 01       	movw	r12, r22
 34a:	7c 01       	movw	r14, r24
 34c:	ac ee       	ldi	r26, 0xEC	; 236
 34e:	b4 ef       	ldi	r27, 0xF4	; 244
 350:	a5 01       	movw	r20, r10
 352:	94 01       	movw	r18, r8
 354:	0e 94 07 02 	call	0x40e	; 0x40e <__mulohisi3>
 358:	dc 01       	movw	r26, r24
 35a:	cb 01       	movw	r24, r22
 35c:	8c 0d       	add	r24, r12
 35e:	9d 1d       	adc	r25, r13
 360:	ae 1d       	adc	r26, r14
 362:	bf 1d       	adc	r27, r15
 364:	b7 ff       	sbrs	r27, 7
 366:	03 c0       	rjmp	.+6      	; 0x36e <do_rand+0x72>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	a1 09       	sbc	r26, r1
 36c:	b0 48       	sbci	r27, 0x80	; 128
 36e:	88 83       	st	Y, r24
 370:	99 83       	std	Y+1, r25	; 0x01
 372:	aa 83       	std	Y+2, r26	; 0x02
 374:	bb 83       	std	Y+3, r27	; 0x03
 376:	9f 77       	andi	r25, 0x7F	; 127
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	9f 90       	pop	r9
 38a:	8f 90       	pop	r8
 38c:	08 95       	ret

0000038e <rand_r>:
 38e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <do_rand>
 392:	08 95       	ret

00000394 <rand>:
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 7e 01 	call	0x2fc	; 0x2fc <do_rand>
 39c:	08 95       	ret

0000039e <srand>:
 39e:	a0 e0       	ldi	r26, 0x00	; 0
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3aa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3ae:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3b2:	08 95       	ret

000003b4 <__divmodsi4>:
 3b4:	05 2e       	mov	r0, r21
 3b6:	97 fb       	bst	r25, 7
 3b8:	1e f4       	brtc	.+6      	; 0x3c0 <__divmodsi4+0xc>
 3ba:	00 94       	com	r0
 3bc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__negsi2>
 3c0:	57 fd       	sbrc	r21, 7
 3c2:	07 d0       	rcall	.+14     	; 0x3d2 <__divmodsi4_neg2>
 3c4:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodsi4>
 3c8:	07 fc       	sbrc	r0, 7
 3ca:	03 d0       	rcall	.+6      	; 0x3d2 <__divmodsi4_neg2>
 3cc:	4e f4       	brtc	.+18     	; 0x3e0 <__divmodsi4_exit>
 3ce:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__negsi2>

000003d2 <__divmodsi4_neg2>:
 3d2:	50 95       	com	r21
 3d4:	40 95       	com	r20
 3d6:	30 95       	com	r19
 3d8:	21 95       	neg	r18
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	4f 4f       	sbci	r20, 0xFF	; 255
 3de:	5f 4f       	sbci	r21, 0xFF	; 255

000003e0 <__divmodsi4_exit>:
 3e0:	08 95       	ret

000003e2 <__negsi2>:
 3e2:	90 95       	com	r25
 3e4:	80 95       	com	r24
 3e6:	70 95       	com	r23
 3e8:	61 95       	neg	r22
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	8f 4f       	sbci	r24, 0xFF	; 255
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	08 95       	ret

000003f2 <__muluhisi3>:
 3f2:	0e 94 2e 02 	call	0x45c	; 0x45c <__umulhisi3>
 3f6:	a5 9f       	mul	r26, r21
 3f8:	90 0d       	add	r25, r0
 3fa:	b4 9f       	mul	r27, r20
 3fc:	90 0d       	add	r25, r0
 3fe:	a4 9f       	mul	r26, r20
 400:	80 0d       	add	r24, r0
 402:	91 1d       	adc	r25, r1
 404:	11 24       	eor	r1, r1
 406:	08 95       	ret

00000408 <__mulshisi3>:
 408:	b7 ff       	sbrs	r27, 7
 40a:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__muluhisi3>

0000040e <__mulohisi3>:
 40e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__muluhisi3>
 412:	82 1b       	sub	r24, r18
 414:	93 0b       	sbc	r25, r19
 416:	08 95       	ret

00000418 <__udivmodsi4>:
 418:	a1 e2       	ldi	r26, 0x21	; 33
 41a:	1a 2e       	mov	r1, r26
 41c:	aa 1b       	sub	r26, r26
 41e:	bb 1b       	sub	r27, r27
 420:	fd 01       	movw	r30, r26
 422:	0d c0       	rjmp	.+26     	; 0x43e <__udivmodsi4_ep>

00000424 <__udivmodsi4_loop>:
 424:	aa 1f       	adc	r26, r26
 426:	bb 1f       	adc	r27, r27
 428:	ee 1f       	adc	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	a2 17       	cp	r26, r18
 42e:	b3 07       	cpc	r27, r19
 430:	e4 07       	cpc	r30, r20
 432:	f5 07       	cpc	r31, r21
 434:	20 f0       	brcs	.+8      	; 0x43e <__udivmodsi4_ep>
 436:	a2 1b       	sub	r26, r18
 438:	b3 0b       	sbc	r27, r19
 43a:	e4 0b       	sbc	r30, r20
 43c:	f5 0b       	sbc	r31, r21

0000043e <__udivmodsi4_ep>:
 43e:	66 1f       	adc	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	1a 94       	dec	r1
 448:	69 f7       	brne	.-38     	; 0x424 <__udivmodsi4_loop>
 44a:	60 95       	com	r22
 44c:	70 95       	com	r23
 44e:	80 95       	com	r24
 450:	90 95       	com	r25
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	bd 01       	movw	r22, r26
 458:	cf 01       	movw	r24, r30
 45a:	08 95       	ret

0000045c <__umulhisi3>:
 45c:	a2 9f       	mul	r26, r18
 45e:	b0 01       	movw	r22, r0
 460:	b3 9f       	mul	r27, r19
 462:	c0 01       	movw	r24, r0
 464:	a3 9f       	mul	r26, r19
 466:	70 0d       	add	r23, r0
 468:	81 1d       	adc	r24, r1
 46a:	11 24       	eor	r1, r1
 46c:	91 1d       	adc	r25, r1
 46e:	b2 9f       	mul	r27, r18
 470:	70 0d       	add	r23, r0
 472:	81 1d       	adc	r24, r1
 474:	11 24       	eor	r1, r1
 476:	91 1d       	adc	r25, r1
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
